;
;*******************************************************************************
;                   Copyright (c) 2008,ZhengYongzhi
;                         All rights reserved.
;
; File Name£º   CortexM3.sct
; 
; Description:  
;
; History:      <author>          <time>        <version>       
;             ZhengYongzhi      2008-8-13          1.0
;    desc:    ORG.
;*******************************************************************************
;
#define BOOT_ROM_BASE       0x00000000
#define MICROLIB_BASE       0x00002000
#define DRIVERLIB_BASE      0x00003000

#define LOADER_CODE_BASE    0x01018000
#define LOADER_DATA_BASE    0x03014000
#define START_CODE_BASE     0x1101f000
#define START_DATA_BASE     0x13016000

#define SYS_CODE_BASE       0x01000000
#define SYS_CODE_SIZE       0x00020000

#define SYS_DATA_BASE       0x03000000
#define SYS_DATA_SIZE       0x00018000

#define HEAP_BASE           0x03016000
#define HEAP_LIMIT          0x03016000

#define STACK_LIMIT         0x03016000
#define STACK_BASE          0x03018000

#define FILESYS_CODE_BASE   0x0101DC00
#define FILESYS_DATA_BASE   0x03015FF0

START_REGION START_CODE_BASE OVERLAY
{
    START START_CODE_BASE
    {
        *.o(START_VECT, +First)
        *.o(START_CODE)
    }
}

LOAD_REGION SYS_CODE_BASE  OVERLAY                                             
{
    ;--------------------------------------------------------------
    ;Module Info Table
    MODULE_INFO 0x21000000
    {
      *.o(ModuleInfo)
    }
    
    WIFI_FIRMWARE_ONE 0X31000000 
    {
      *(wifi_fw)
    }   

    
    WIFI_FIRMWARE_TWO 0X41000000
    {
      *(wifi_nvram)
    }
    
    ;--------------------------------------------------------------
    ;System Section
    SYS_CODE (SYS_CODE_BASE)    OVERLAY
    {
        *(SysCode)
        *(FatCode)
        *(FlashCode)      
        *(DialogBoxCode)
        *(MessageBoxCode)
        *(DialogHoldCode)                
        
        *(+RO)
    }
    SYS_DATA (SYS_DATA_BASE)    OVERLAY
    {
        *.o(vect, +First)
        
        *(SysData)
        *(SysBss)
        
        *(FatData)
        *(FatBss)    
        
        *(FlashData)
        *(FlashBss) 
        
        *(LowPowerBoxData)
        *(LowPowerBoxBss)       
        
        *(DialogBoxData)
        *(DialogBoxBss)
        	
        *(MessageBoxData)
        *(MessageBoxBss)
        *(DialogHoldData)
        *(DialogHoldBss)
        
        *(+RW)
        *(+ZI)
    }	
    LCD_DRIVER1_CODE(ImageLimit(SYS_CODE)) OVERLAY
    {
        *(ST7637DriverCode)
    }
    LCD_DRIVER1_DATA(ImageLimit(SYS_DATA)) OVERLAY
    {
        *(ST7637DriverData)
        *(ST7637DriverBss)
    } 
    LCD_DRIVER2_CODE(ImageLimit(SYS_CODE)) OVERLAY
    {
        *(SSD1697DriverCode)
    }
    LCD_DRIVER2_DATA(ImageLimit(SYS_DATA)) OVERLAY
    {
        *( SSD1697DriverData)
        *( SSD1697DriverBss)
    } 
    #define LCD_DRIVER_CODE_END  ((ImageLimit(LCD_DRIVER2_CODE)>ImageLimit(LCD_DRIVER1_CODE))?ImageLimit(LCD_DRIVER2_CODE):ImageLimit(LCD_DRIVER1_CODE))
    #define LCD_DRIVER_DATA_END  ((ImageLimit(LCD_DRIVER2_DATA)>ImageLimit(LCD_DRIVER1_DATA))?ImageLimit(LCD_DRIVER2_DATA):ImageLimit(LCD_DRIVER1_DATA))
       
;============================================================================================
;
; USB, SYSINIT
;
;=============================================================================================    
    ;USB Section
    USB_CODE (LCD_DRIVER_CODE_END) OVERLAY
    {
        *(UsbCode)
    }
    USB_DATA (LCD_DRIVER_DATA_END) OVERLAY
    {
        *(UsbData)
        *(UsbBss)
    }
    ScatterAssert(ImageLimit(USB_CODE) < FILESYS_CODE_BASE)
    ScatterAssert(ImageLimit(USB_DATA) < FILESYS_DATA_BASE)
    
    ;--------------------------------------------------------------
    ;System Init Section
    SYS_INIT_CODE (LCD_DRIVER_CODE_END) OVERLAY
    {
        *(SysInitCode)
        *(FlashInitCode)
        *(FatInitCode)
    }
    SYS_INIT_DATA (LCD_DRIVER_DATA_END) OVERLAY
    {
        *(SysInitData)
        *(FlashInitData)
        *(FatInitData)
        
        *(SysInitBss)
        *(FlashInitBss)
        *(FatInitBss)
    }
    ScatterAssert(ImageLimit(SYS_INIT_CODE) < FILESYS_CODE_BASE)
    ScatterAssert(ImageLimit(SYS_INIT_DATA) < FILESYS_DATA_BASE) 
          
       
;============================================================================================
;
;Remote play section inlcude WiFi Control, WPA, SCAN, LWIP
;
;=============================================================================================    
    WIFI_AP_WIN_CODE (LCD_DRIVER_CODE_END)   OVERLAY
    {
        *(WiFiAPWinCode)
        
        *(KeyboardWinCode)
    }
    WIFI_AP_WIN_DATA (LCD_DRIVER_DATA_END)   OVERLAY
    {
        *(WiFiAPWinData)
        *(WiFiAPWinBss)
        
        *(KeyboardWinData)
        *(KeyboardWinBss)
    }  
    #define MAX_WIFI_AP_WIN_CODE  ImageLimit(WIFI_AP_WIN_CODE)
    #define MAX_WIFI_AP_WIN_DATA  ImageLimit(WIFI_AP_WIN_DATA)  

    
    WIFI_PLAY_WIN_CODE (LCD_DRIVER_CODE_END)   OVERLAY
    {
        *(WiFiPlayWinCode)

        *(WiFiMusicBrowCode)
    }
    WIFI_PLAY_WIN_DATA (LCD_DRIVER_DATA_END)   OVERLAY
    {
        *(WiFiPlayWinData)
        *(WiFiPlayWinBss)
        
        *(WiFiMusicBrowData)
        *(WiFiMusicBrowBss)
    }
    #define MAX_WIFI_PLAY_WIN_CODE  ((ImageLimit(WIFI_PLAY_WIN_CODE)>MAX_WIFI_AP_WIN_CODE)?ImageLimit(WIFI_PLAY_WIN_CODE):MAX_WIFI_AP_WIN_CODE)
    #define MAX_WIFI_PLAY_WIN_DATA  ((ImageLimit(WIFI_PLAY_WIN_DATA)>MAX_WIFI_AP_WIN_DATA)?ImageLimit(WIFI_PLAY_WIN_DATA):MAX_WIFI_AP_WIN_DATA)
    
    WIFI_SYS_CODE (MAX_WIFI_PLAY_WIN_CODE) OVERLAY 
    {
        sdio_io.o(+RO)
        sdio_irq.o(+RO)
        sdio_ops.o(+RO)	
        sdio_ctrl.o(+RO)
        sdiom.o(+RO)
        
        wificommon.o(+RO)
        dhd_txrx_process.o(+RO)	
        eth.o(+RO)
        
        dhd_cdc2.o(+RO)       
        wificontrol.o(+RO)
        pbuf.o(+RO)
    }
    WIFI_SYS_DATA (MAX_WIFI_PLAY_WIN_DATA) OVERLAY
    {
        sdio_io.o(+RW)
        sdio_irq.o(+RW)
        sdio_ops.o(+RW)
        sdio_ctrl.o(+RW)
        sdiom.o(+RW)
        
        wificommon.o(+RW)
        dhd_txrx_process.o(+RW)		
        eth.o(+RW)
        
        wificontrol.o(+RW)
        dhd_cdc2.o(+RW)
        pbuf.o(+RW)
        		
        WiFiWin.o(+ZI)
        sdio_io.o(+ZI)
        sdio_irq.o(+ZI)
        sdio_ops.o(+ZI)
        sdio_ctrl.o(+ZI)
        sdiom.o(+ZI)
        
        wificommon.o(+ZI)
        dhd_txrx_process.o(+ZI)		
        eth.o(+ZI)
        wificontrol.o(+ZI)
        dhd_cdc2.o(+ZI)
        pbuf.o(+ZI)
        *(WpaSupplicant)
    }

    WIFI_DHCP_CODE (ImageLimit(WIFI_SYS_CODE))  OVERLAY
    {
        dhcp.o(+RO) 
    }

    WIFI_DHCP_DATA (ImageLimit(WIFI_SYS_DATA))  OVERLAY
    {
        dhcp.o(+RW)
        dhcp.o(+ZI)
    }
    
    FIND_NETFILE_CODE (ImageLimit(WIFI_SYS_CODE))  OVERLAY
    {
        netfile.o(+RO)
        netfindfile.o(+RO)
    }

    FIND_NETFILE_DATA (ImageLimit(WIFI_SYS_DATA))  OVERLAY
    {
        netfile.o(+RW)
        netfindfile.o(+RW)
	
        netfile.o(+ZI)
        netfindfile.o(+ZI) 
    }

    #define WIFI_LWIP_CODE_BASE (ImageLimit(WIFI_DHCP_CODE) > ImageLimit(FIND_NETFILE_CODE)? ImageLimit(WIFI_DHCP_CODE):ImageLimit(FIND_NETFILE_CODE))
    #define WIFI_LWIP_DATA_BASE (ImageLimit(WIFI_DHCP_DATA) > ImageLimit(FIND_NETFILE_DATA)? ImageLimit(WIFI_DHCP_DATA):ImageLimit(FIND_NETFILE_DATA))

    WIFI_LWIP_CODE (WIFI_LWIP_CODE_BASE)  OVERLAY
    {
        netif.o(+RO)
        autoIp.o(+RO)
        icmp.o(+RO)
        inet_chksum.o(+RO)
        inet.o(+RO)
        ip.o(+RO)
        tcp.o(+RO)
        tcp_in.o(+RO)
        tcp_out.o(+RO) 
        dns.o(+RO) 
        udp.o(+RO)        
        
        http.o(+RO)       			
        tools.o(+RO)	
    }
    WIFI_LWIP_DATA (WIFI_LWIP_DATA_BASE)  OVERLAY
    {
        netif.o(+RW)
        autoIp.o(+RW)
        icmp.o(+RW)
        inet_chksum.o(+RW)
        inet.o(+RW)
        ip.o(+RW)
        tcp.o(+RW)
        tcp_in.o(+RW)
        tcp_out.o(+RW)
        dns.o(+RW) 
        udp.o(+RW)
        
        
        http.o(+RW)       
        tools.o(+RW)
        
        netif.o(+ZI)
        autoIp.o(+ZI)
        icmp.o(+ZI)
        inet_chksum.o(+ZI)
        inet.o(+ZI)
        ip.o(+ZI)
        tcp.o(+ZI)
        tcp_in.o(+ZI)
        tcp_out.o(+ZI)   
        dns.o(+ZI) 
        udp.o(+ZI)       
        
        http.o(+ZI)        
        tools.o(+ZI)	 
    }
   
    ;wpa_supplicant code      
    WIFI_WPA_CODE (WIFI_LWIP_CODE_BASE)  OVERLAY
    {
        wpa_aes.o(+RO)             
        aes_wrap.o(+RO)        
        
        ws_common.o(+RO)          
        driver_wext.o(+RO)     
        
        eloop.o(+RO)           
        
        os_internal.o(+RO)     
        
        wpa_sha1.o(+RO)            
        wpa.o(+RO)             
        
        wpa_md5.o(+RO)         
        wpa_rc4.o(+RO)         
        wpa_supplicant.o(+RO)	
   }  
   WIFI_WPA_DATA (ImageLimit(WIFI_LWIP_DATA))  OVERLAY
   {
        wpa_aes.o(+RW)             
        aes_wrap.o(+RW)        
        
        ws_common.o(+RW)          
        driver_wext.o(+RW)     
        
        eloop.o(+RW)           
        
        os_internal.o(+RW)     
        preauth.o(+RW)         
        rsa.o(+RW)             
        wpa_sha1.o(+RW)            
        wpa.o(+RW)             
        
        wpa_md5.o(+RW)         
        wpa_rc4.o(+RW)         
        wpa_supplicant.o(+RW)	
        
        
        wpa_aes.o(+ZI)             
        aes_wrap.o(+ZI)        
        
        ws_common.o(+ZI)          
        driver_wext.o(+ZI)     
        
        eloop.o(+ZI)           
        
        os_internal.o(+ZI)     
        
        wpa_sha1.o(+ZI)            
        wpa.o(+ZI)             
        
        wpa_md5.o(+ZI)         
        wpa_rc4.o(+ZI)         
        wpa_supplicant.o(+ZI)
    }
    
    WIFI_SCAN_CODE (ImageLimit(WIFI_SYS_CODE))   OVERLAY 
    {
        sys_malloc.o(+RO)
        sdio_cis.o(+RO)
        sdio.o(+RO)    	
        bcmsdh_sdmmc_linux.o(+RO)
        bcmsdh_linux.o(+RO)
        
        bcmsdh_sdmmc.o(+RO)
        bcmsdh.o(+RO)
        dhd_sdio.o(+RO)
        siutils.o(+RO)
        hndpmu.o(+RO)
        dhd_linux.o(+RO)
        bcmutils.o(+RO)
        dhd_common.o(+RO)
        
        wl_iw.o(+RO)
        aiutils.o(+RO)
        *(SDInitCode)
    }
    WIFI_SCAN_DATA (ImageLimit(WIFI_SYS_DATA))   OVERLAY 
    {
        sys_malloc.o(+RW)
        sdio_cis.o(+RW)
        sdio.o(+RW)		
        bcmsdh_sdmmc_linux.o(+RW)
        bcmsdh_linux.o(+RW)
        bcmsdh_sdmmc.o(+RW)	
        bcmsdh.o(+RW)
        dhd_sdio.o(+RW)	
        siutils.o(+RW)
        hndpmu.o(+RW)	
        dhd_linux.o(+RW)
        bcmutils.o(+RW)
        dhd_common.o(+RW)
        
        wl_iw.o(+RW)	
        aiutils.o(+RW)		
        
        sys_malloc.o(+ZI)
        sdio_cis.o(+ZI)
        sdio.o(+ZI)		
        
        bcmsdh_sdmmc_linux.o(+ZI)
        bcmsdh_linux.o(+ZI)
        bcmsdh_sdmmc.o(+ZI)	
        bcmsdh.o(+ZI)
        dhd_sdio.o(+ZI)	
        siutils.o(+ZI)
        hndpmu.o(+ZI)	
        dhd_linux.o(+ZI)
        bcmutils.o(+ZI)		
        dhd_common.o(+ZI)
        
        wl_iw.o(+ZI)	
        aiutils.o(+ZI)	
        *(SDInitData)
        *(SDInitBss)	
    } 
    #define WIFI_WPA_SCAN_MAX_CODE (ImageLimit(WIFI_WPA_CODE)>ImageLimit(WIFI_SCAN_CODE)?ImageLimit(WIFI_WPA_CODE):ImageLimit(WIFI_SCAN_CODE))
    
    #define WIFI_CODE_END (WIFI_WPA_SCAN_MAX_CODE>ImageLimit(WIFI_LWIP_CODE)?WIFI_WPA_SCAN_MAX_CODE:ImageLimit(WIFI_LWIP_CODE))
    #define WIFI_DATA_END (ImageLimit(WIFI_WPA_DATA))
    
    WIFI_AUDIO_CTRL_CODE (WIFI_CODE_END) OVERLAY             ;AudioControl Code
    {
        *(WiFiAudioCtrlCode)
    }
    WIFI_AUDIO_CTRL_DATA (WIFI_DATA_END) OVERLAY             ;AudioControl Data
    {
        *(WiFiAudioCtrlData)
        *(WiFiAudioCtrlBss)        
    }
    
    ;WiFi XML
    WIFI_XML_CODE(ImageLimit(WIFI_AUDIO_CTRL_CODE)) OVERLAY
    {
        *(XmlAnalyzeCode)
    }
    WIFI_XML_DATA(ImageLimit(WIFI_AUDIO_CTRL_DATA))OVERLAY
    {
        *(XmlAnalyzeData)
        *(XmlAnalyzeBss)        
    }    
;
;==============================================================================
;
;   UI Section
;
;   MainMenu¡¢MusicWin¡¢RadioWin¡¢RecordWin¡¢Text¡¢Browser¡¢SystemSet
;   and
;   Music¡¢Radio¡¢Record
; 
;
;==============================================================================
;
    #define UI_CODE_BASE  LCD_DRIVER_CODE_END
    #define UI_DATA_BASE  LCD_DRIVER_DATA_END
    
    ;--------------------------------------------------------------
    ;MainMenu, Overlay with Other UI Section
    MAINMENU_CODE (UI_CODE_BASE) OVERLAY  ;MainMenu Main Code
    {
        *(MainMenuCode)
    }
    MAINMENU_DATA (UI_DATA_BASE) OVERLAY  ;MainMenu Main Data
    {
        *(MainMenuData)
        *(MainMenuBss)
    }   
    #define MAX_MAINMENU_CODE  (ImageLimit(MAINMENU_CODE))
    #define MAX_MAINMENU_DATA  (ImageLimit(MAINMENU_DATA))

    ;------------------------------------------------------------------------------------
    CHARGE_WIN_CODE (UI_CODE_BASE) OVERLAY            
    {
        *(ChargeWinCode)
    }
    
    CHARGE_WIN_DATA (UI_DATA_BASE) OVERLAY            
    {
        *(ChargeWinData)
        *(ChargeWinBss)
    }   
    #define MAX_UI_CODE_END ((ImageLimit(CHARGE_WIN_CODE) > MAX_MAINMENU_CODE)? ImageLimit(CHARGE_WIN_CODE) : MAX_MAINMENU_CODE)
    #define MAX_UI_DATA_END ((ImageLimit(CHARGE_WIN_DATA) > MAX_MAINMENU_DATA)? ImageLimit(CHARGE_WIN_DATA) : MAX_MAINMENU_DATA)


    ;---------------------------------------------------------------
    ;Mp3 Decode 
    MP3_COMMON_CODE (ImageLimit(WIFI_AUDIO_CTRL_CODE)) OVERLAY                    ;Mp3 Decode Code
    {        
        *(Mp3CommonCode)        
    }
    MP3_COMMON_DATA (ImageLimit(WIFI_AUDIO_CTRL_DATA)) OVERLAY                    ;Mp3 Decode Data
    {
        *(Mp3CommonData)
        *(Mp3CommonBss)        
    }

    MP3_DECODE_CODE (ImageLimit(MP3_COMMON_CODE)) OVERLAY                    ;Mp3 Decode Code
    {        
        *(Mp3Code)
        *(Mp3DecDataHL)
        mp3_rom_tbl.o
    }
    MP3_DECODE_DATA (ImageLimit(MP3_COMMON_DATA)) OVERLAY                    ;Mp3 Decode Data
    {
        *(Mp3Bss)        
    }
    
    MP3_INIT_CODE(ImageLimit(MP3_COMMON_CODE)) OVERLAY
    {
        *(Mp3InitCode)
    }

    MP3_INIT_DATA(ImageLimit(MP3_COMMON_DATA)) OVERLAY
    {
        *(Mp3InitData)
        *(Mp3InitBss)
    }
    #define MP3_DECODE_CODE_END  ((ImageLimit(MP3_DECODE_CODE) > ImageLimit(MP3_INIT_CODE)) ? ImageLimit(MP3_DECODE_CODE) : ImageLimit(MP3_INIT_CODE))
    #define MP3_DECODE_DATA_END  ((ImageLimit(MP3_DECODE_DATA) > ImageLimit(MP3_INIT_DATA)) ? ImageLimit(MP3_DECODE_DATA) : ImageLimit(MP3_INIT_DATA))
    
    ScatterAssert(MP3_DECODE_CODE_END < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(MP3_DECODE_DATA_END < (STACK_LIMIT))    

;==============================================================================
;
;   File system.
;
;==============================================================================   
    ENCODE_CODE (FILESYS_CODE_BASE) OVERLAY              ;FileWrite Code
    {
        *(FatWriteCode)
    }
    ENCODE_DATA (FILESYS_DATA_BASE) OVERLAY              ;FileWrite Data
    {
        *(FatWriteData)
        *(FatWriteBss)
    }
    
    ;System Init Section
    FINDFILE_CODE (ImageLimit(ENCODE_CODE)) OVERLAY                     ;FindFile Code
    {
        *(FatFindCode)
    }

    FINDFILE_DATA (ImageLimit(ENCODE_DATA)) OVERLAY                     ;FindFile Data
    {
        *(FatFindData)
        *(FatFindBss)	
    }
    
    ;FlashWrite
    FLASH_WRITE_CODE (ImageLimit(FINDFILE_CODE)) OVERLAY                  ;FlashWrite Code
    {
        *(SysReservedCode)    
        *(FlashWriteCode)
        *(SDWriteCode)
    }
    FLASH_WRITE_DATA (ImageLimit(FINDFILE_DATA)) OVERLAY                  ;FlashWrite Data
    {
        *(SysReservedData)
        *(SysReservedBss)

        *(FlashWriteData)
        *(FlashWriteBss)
        
        *(SDWriteData)
        *(SDWriteBss)
    }    
    ScatterAssert(ImageLimit(FLASH_WRITE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(FLASH_WRITE_DATA) < (STACK_LIMIT)) 
    
     
;==============================================================================
;
;   Heap&Stack Section
;   
;==============================================================================
    FTL_CACHE_BUF2 (FILESYS_CODE_BASE -(0x8080 + 0x3000))    OVERLAY
    {
        *(ftlcache2)
    }
    FTL_CACHE_BUF  (FILESYS_CODE_BASE -(0x8080))    OVERLAY
    {
        *(ftlcache)
    }
    
    ARM_LIB_HEAP    HEAP_BASE EMPTY (HEAP_LIMIT - HEAP_BASE)        ; Heap size == 0
    {
    }
    
    ARM_LIB_STACK   STACK_BASE EMPTY -(STACK_BASE - STACK_LIMIT)    ; Stack 0x20010000 -- 0x2000e000
    {
    }
}

;*******************************************************************************
