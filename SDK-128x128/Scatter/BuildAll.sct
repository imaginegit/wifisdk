;
;*******************************************************************************
;                   Copyright (c) 2008,ZhengYongzhi
;                         All rights reserved.
;
; File Name£º   CortexM3.sct
; 
; Description:  
;
; History:      <author>          <time>        <version>       
;             ZhengYongzhi      2008-8-13          1.0
;    desc:    ORG.
;*******************************************************************************
;
#define BOOT_ROM_BASE       0x00000000
#define MICROLIB_BASE       0x00002000
#define DRIVERLIB_BASE      0x00003000

#define LOADER_CODE_BASE    0x01018000
#define LOADER_DATA_BASE    0x03014000
#define START_CODE_BASE     0x1101f000
#define START_DATA_BASE     0x13016000

#define SYS_CODE_BASE       0x01000000
#define SYS_CODE_SIZE       0x00020000

#define SYS_DATA_BASE       0x03000000
#define SYS_DATA_SIZE       0x00018000

#define HEAP_BASE           0x03016000
#define HEAP_LIMIT          0x03016000

#define STACK_LIMIT         0x03016000
#define STACK_BASE          0x03018000

START_REGION START_CODE_BASE OVERLAY
{
    START START_CODE_BASE
    {
        *.o(START_VECT, +First)
        *.o(START_CODE)
    }
}


LOAD_REGION SYS_CODE_BASE  OVERLAY                                             
{
    ;--------------------------------------------------------------
    ;Module Info Table
    MODULE_INFO 0x21000000
    {
      *.o(ModuleInfo)
    }
    
    WIFI_FIRMWARE_ONE 0X31000000 
    {
      *(fw_RK903)
    }   

    
    WIFI_FIRMWARE_TWO 0X41000000
    {
      *(nvram_RK903)
    }
    
    ;--------------------------------------------------------------
    ;System Section
    SYS_CODE (SYS_CODE_BASE)    OVERLAY
    {
      *(SysCode)
      
      *(FlashCode)
			*(LowPowerBoxCode)          

      *(+RO)
    }
    SYS_DATA (SYS_DATA_BASE)    OVERLAY
    {
      *.o(vect, +First)
      
      *(SysData)
      *(SysBss)
      
      *(FlashData)
      *(FlashBss) 


			*(LowPowerBoxData)
      *(LowPowerBoxBss)       
      
      *(+RW)
      *(+ZI)
    }	
    LCD_DRIVER1_CODE(ImageLimit(SYS_CODE)) OVERLAY
    {
      *(ST7637DriverCode)
    }
    LCD_DRIVER1_DATA(ImageLimit(SYS_DATA)) OVERLAY
    {
      *(ST7637DriverData)
      *(ST7637DriverBss)
    } 
    LCD_DRIVER2_CODE(ImageLimit(SYS_CODE)) OVERLAY
    {
        *(SSD1697DriverCode)
    }
    LCD_DRIVER2_DATA(ImageLimit(SYS_DATA)) OVERLAY
    {
        *( SSD1697DriverData)
        *( SSD1697DriverBss)
    } 
    #define LCD_DRIVER_CODE_END  ((ImageLimit(LCD_DRIVER2_CODE)>ImageLimit(LCD_DRIVER1_CODE))?ImageLimit(LCD_DRIVER2_CODE):ImageLimit(LCD_DRIVER1_CODE))
    #define LCD_DRIVER_DATA_END  ((ImageLimit(LCD_DRIVER2_DATA)>ImageLimit(LCD_DRIVER1_DATA))?ImageLimit(LCD_DRIVER2_DATA):ImageLimit(LCD_DRIVER1_DATA))

    SYS_CODE_TWO (LCD_DRIVER_CODE_END) OVERLAY
    {
			*(FatCode)
			*(FindFileCode)
			*(FatFindCode)
			
			*(DialogBoxCode)
			*(MessageBoxCode)
			*(DialogHoldCode)
    }

    SYS_DATA_TWO (LCD_DRIVER_DATA_END) OVERLAY
    {
			*(FatData)
			*(FatBss)
			
			*(FindFileData)
			*(FatFindData)
			
			*(FindFileBss)
			*(FatFindBss)	
			
			*(DialogBoxData)
			*(DialogBoxBss)
			
			*(MessageBoxData)
			*(MessageBoxBss)
			
			*(DialogHoldData)
			*(DialogHoldBss)
    }
    
;============================================================================================
;
;Remote play section inlcude WiFi Control, WPA, SCAN, LWIP
;
;
;=============================================================================================    
    WIFI_AP_WIN_CODE (LCD_DRIVER_CODE_END)   OVERLAY
    {
        *(WiFiCode)
        *(WiFiInitCode)
        *(WiFiDeInitCode)
        *(WiFiServiceCode)
        WiFiKeyboardWin.o(+RO) 
    }
    WIFI_AP_WIN_DATA (LCD_DRIVER_DATA_END)   OVERLAY
    {
        *(WiFiData)
        *(WiFiBss)
        
        *(WiFiInitData)
        *(WiFiDeInitData)
        
        *(WiFiInitBss)
        *(WiFiDeInitBss)
        
        *(WiFiServiceData)
        *(WiFiServiceBss)
        
        WiFiKeyboardWin.o(+RW)						
        WiFiKeyboardWin.o(+ZI)
    }  
    #define MAX_WIFI_AP_WIN_CODE  ImageLimit(WIFI_AP_WIN_CODE)
    #define MAX_WIFI_AP_WIN_DATA  ImageLimit(WIFI_AP_WIN_DATA)  

    
    WIFI_PLAY_WIN_CODE (LCD_DRIVER_CODE_END)   OVERLAY
    {
        WiFiPlayWin.o(+RO)  
        WiFiStationWin.o(+RO)  
    }
    WIFI_PLAY_WIN_DATA (LCD_DRIVER_DATA_END)   OVERLAY
    {
        WiFiPlayWin.o(+RW)
        WiFiStationWin.o(+RW)					
												
        WiFiPlayWin.o(+ZI)			
        WiFiStationWin.o(+ZI)
    }
    #define MAX_WIFI_PLAY_WIN_CODE  ((ImageLimit(WIFI_PLAY_WIN_CODE)>MAX_WIFI_AP_WIN_CODE)?ImageLimit(WIFI_PLAY_WIN_CODE):MAX_WIFI_AP_WIN_CODE)
    #define MAX_WIFI_PLAY_WIN_DATA  ((ImageLimit(WIFI_PLAY_WIN_DATA)>MAX_WIFI_AP_WIN_DATA)?ImageLimit(WIFI_PLAY_WIN_DATA):MAX_WIFI_AP_WIN_DATA)
    

    #define REMOTE_PLAY_CODE_BASE  MAX_WIFI_PLAY_WIN_CODE
    #define REMOTE_PLAY_DATA_BASE  MAX_WIFI_PLAY_WIN_DATA
    
    WIFI_SYS_CODE (REMOTE_PLAY_CODE_BASE)   OVERLAY 
    {
        sdio_io.o(+RO)
        sdio_irq.o(+RO)
        sdio_ops.o(+RO)	
        sdio_ctrl.o(+RO)
        sdiom.o(+RO)
        
        wificommon.o(+RO)
        dhd_txrx_process.o(+RO)	
        eth.o(+RO)
        
        dhd_cdc2.o(+RO)       
        wificontrol.o(+RO)
        pbuf.o(+RO)
    }
    WIFI_SYS_DATA (REMOTE_PLAY_DATA_BASE)   OVERLAY
    {
        sdio_io.o(+RW)
        sdio_irq.o(+RW)
        sdio_ops.o(+RW)
        sdio_ctrl.o(+RW)
        sdiom.o(+RW)
        
        wificommon.o(+RW)
        dhd_txrx_process.o(+RW)		
        eth.o(+RW)
        
        wificontrol.o(+RW)
        dhd_cdc2.o(+RW)
        pbuf.o(+RW)
        		
        WiFiWin.o(+ZI)
        sdio_io.o(+ZI)
        sdio_irq.o(+ZI)
        sdio_ops.o(+ZI)
        sdio_ctrl.o(+ZI)
        sdiom.o(+ZI)
        
        wificommon.o(+ZI)
        dhd_txrx_process.o(+ZI)		
        eth.o(+ZI)
        wificontrol.o(+ZI)
        dhd_cdc2.o(+ZI)
        pbuf.o(+ZI)
        *(WpaSupplicant)
    }

    WIFI_DHCP_CODE (ImageLimit(WIFI_SYS_CODE))  OVERLAY
    {
        dhcp.o(+RO) 
    }

    WIFI_DHCP_DATA (ImageLimit(WIFI_SYS_DATA))  OVERLAY
    {
        dhcp.o(+RW)
        dhcp.o(+ZI)
    }

    #define WIFI_LWIP_CODE_BASE ImageLimit(WIFI_DHCP_CODE)
    #define WIFI_LWIP_DATA_BASE ImageLimit(WIFI_DHCP_DATA)   
    WIFI_LWIP_CODE (WIFI_LWIP_CODE_BASE)  OVERLAY
    {
        netif.o(+RO)
        autoIp.o(+RO)
        icmp.o(+RO)
        inet_chksum.o(+RO)
        inet.o(+RO)
        ip.o(+RO)
        tcp.o(+RO)
        tcp_in.o(+RO)
        tcp_out.o(+RO) 
        dns.o(+RO) 
        udp.o(+RO)        
        
        http.o(+RO)       			
        tools.o(+RO)	
    }
    WIFI_LWIP_DATA (WIFI_LWIP_DATA_BASE)  OVERLAY
    {
        netif.o(+RW)
        autoIp.o(+RW)
        icmp.o(+RW)
        inet_chksum.o(+RW)
        inet.o(+RW)
        ip.o(+RW)
        tcp.o(+RW)
        tcp_in.o(+RW)
        tcp_out.o(+RW)
        dns.o(+RW) 
        udp.o(+RW)
        
        
        http.o(+RW)       
        tools.o(+RW)
        
        netif.o(+ZI)
        autoIp.o(+ZI)
        icmp.o(+ZI)
        inet_chksum.o(+ZI)
        inet.o(+ZI)
        ip.o(+ZI)
        tcp.o(+ZI)
        tcp_in.o(+ZI)
        tcp_out.o(+ZI)   
        dns.o(+ZI) 
        udp.o(+ZI)       
        
        http.o(+ZI)        
        tools.o(+ZI)	 
    }

    
    
    ;wpa_supplicant code      
    WIFI_WPA_CODE (WIFI_LWIP_CODE_BASE)  OVERLAY
    {
        wpa_aes.o(+RO)             
        aes_wrap.o(+RO)        
        
        ws_common.o(+RO)          
        driver_wext.o(+RO)     
        
        eloop.o(+RO)           
        
        os_internal.o(+RO)     
        
        wpa_sha1.o(+RO)            
        wpa.o(+RO)             
        
        wpa_md5.o(+RO)         
        wpa_rc4.o(+RO)         
        wpa_supplicant.o(+RO)	
   }
    
   WIFI_WPA_DATA (ImageLimit(WIFI_LWIP_DATA))  OVERLAY
   {
        wpa_aes.o(+RW)             
        aes_wrap.o(+RW)        
        
        ws_common.o(+RW)          
        driver_wext.o(+RW)     
        
        eloop.o(+RW)           
        
        os_internal.o(+RW)     
        preauth.o(+RW)         
        rsa.o(+RW)             
        wpa_sha1.o(+RW)            
        wpa.o(+RW)             
        
        wpa_md5.o(+RW)         
        wpa_rc4.o(+RW)         
        wpa_supplicant.o(+RW)	
        
        
        wpa_aes.o(+ZI)             
        aes_wrap.o(+ZI)        
        
        ws_common.o(+ZI)          
        driver_wext.o(+ZI)     
        
        eloop.o(+ZI)           
        
        os_internal.o(+ZI)     
        
        wpa_sha1.o(+ZI)            
        wpa.o(+ZI)             
        
        wpa_md5.o(+ZI)         
        wpa_rc4.o(+ZI)         
        wpa_supplicant.o(+ZI)
    }
    
    WIFI_SCAN_CODE (ImageLimit(WIFI_SYS_CODE))   OVERLAY 
    {
        sys_malloc.o(+RO)
        sdio_cis.o(+RO)
        sdio.o(+RO)    	
        bcmsdh_sdmmc_linux.o(+RO)
        bcmsdh_linux.o(+RO)
        
        bcmsdh_sdmmc.o(+RO)
        bcmsdh.o(+RO)
        dhd_sdio.o(+RO)
        siutils.o(+RO)
        hndpmu.o(+RO)
        dhd_linux.o(+RO)
        bcmutils.o(+RO)
        dhd_common.o(+RO)
        
        wl_iw.o(+RO)
        aiutils.o(+RO)
        *(SDInitCode)
    }
    WIFI_SCAN_DATA (ImageLimit(WIFI_SYS_DATA))   OVERLAY 
    {
        sys_malloc.o(+RW)
        sdio_cis.o(+RW)
        sdio.o(+RW)		
        bcmsdh_sdmmc_linux.o(+RW)
        bcmsdh_linux.o(+RW)
        bcmsdh_sdmmc.o(+RW)	
        bcmsdh.o(+RW)
        dhd_sdio.o(+RW)	
        siutils.o(+RW)
        hndpmu.o(+RW)	
        dhd_linux.o(+RW)
        bcmutils.o(+RW)
        dhd_common.o(+RW)
        
        wl_iw.o(+RW)	
        aiutils.o(+RW)		
        
        sys_malloc.o(+ZI)
        sdio_cis.o(+ZI)
        sdio.o(+ZI)		
        
        bcmsdh_sdmmc_linux.o(+ZI)
        bcmsdh_linux.o(+ZI)
        bcmsdh_sdmmc.o(+ZI)	
        bcmsdh.o(+ZI)
        dhd_sdio.o(+ZI)	
        siutils.o(+ZI)
        hndpmu.o(+ZI)	
        dhd_linux.o(+ZI)
        bcmutils.o(+ZI)		
        dhd_common.o(+ZI)
        
        wl_iw.o(+ZI)	
        aiutils.o(+ZI)	
        *(SDInitData)
        *(SDInitBss)	
    } 
    #define WPA_SCAN_END (ImageLimit(WIFI_WPA_CODE)>ImageLimit(WIFI_SCAN_CODE)?ImageLimit(WIFI_WPA_CODE):ImageLimit(WIFI_SCAN_CODE))
    #define WIFI_CODE_END  (WPA_SCAN_END > ImageLimit(WIFI_LWIP_CODE)?WPA_SCAN_END: ImageLimit(WIFI_LWIP_CODE))
    #define WIFI_DATA_END ImageLimit(WIFI_WPA_DATA)    
    
    ;--------------------------------------------------------------
    ;WiFi Audio Control
    WIFI_AUDIO_CTRL_CODE (WIFI_CODE_END) OVERLAY             ;AudioControl Code
    {
        *(WiFiAudioCode)
    }
    WIFI_AUDIO_CTRL_DATA (WIFI_DATA_END) OVERLAY             ;AudioControl Data
    {
        *(WiFiAudioData)
        *(WiFiAudioBss)
    }

    ;--------------------------------------------------------------
    ;Wi_Fi code  end 

    
    ;--------------------------------------------------------------
    ;FlashWrite
    FLASH_WRITE_CODE (ImageLimit(SYS_CODE_TWO)) OVERLAY                  ;FlashWrite Code
    {
        *(FlashWriteCode)
        *(SDWriteCode)
    }
    FLASH_WRITE_DATA (ImageLimit(SYS_DATA_TWO)) OVERLAY                  ;FlashWrite Data
    {
        *(FlashWriteData)
        *(FlashWriteBss)
        *(SDWriteData)
        *(SDWriteBss)
    }
    
    ;--------------------------------------------------------------
    ;FileEncode
    ENCODE_CODE (ImageLimit(FLASH_WRITE_CODE)) OVERLAY              ;FileWrite Code
    {
        *(FatWriteCode)
    }
    ENCODE_DATA (ImageLimit(FLASH_WRITE_DATA)) OVERLAY              ;FileWrite Data
    {
        *(FatWriteData)
        *(FatWriteBss)
    }
    
    ;--------------------------------------------------------------
    ;SysArea Read&Write 
    SYSAREA_OP_CODE (ImageLimit(FLASH_WRITE_CODE)) OVERLAY
    {
        *(SysReservedCode)
    }
    
    SYSAREA_OP_DATA (ImageLimit(FLASH_WRITE_DATA)) OVERLAY
    {
        *(SysReservedData)
        *(SysReservedBss)
    }
    
    ;--------------------------------------------------------------
    ;FindFile
    FINDFILE_CODE (LCD_DRIVER_CODE_END) OVERLAY                     ;FindFile Code
    {
    }
    FINDFILE_DATA (LCD_DRIVER_DATA_END) OVERLAY                     ;FindFile Data
    {
    }
        
    ;--------------------------------------------------------------
    ;System Init Section
    #define SYS_INIT_CODE_BASE  ((ImageLimit(ENCODE_CODE)>ImageLimit(SYSAREA_OP_CODE))?ImageLimit(ENCODE_CODE):ImageLimit(SYSAREA_OP_CODE))
    #define SYS_INIT_DATA_BASE  ((ImageLimit(ENCODE_DATA)>ImageLimit(SYSAREA_OP_DATA))?ImageLimit(ENCODE_DATA):ImageLimit(SYSAREA_OP_DATA))

    SYS_INIT_CODE (SYS_INIT_CODE_BASE) OVERLAY
    {
        *(SysInitCode)
        *(FlashInitCode)
        *(FatInitCode)
    }
    SYS_INIT_DATA (SYS_INIT_DATA_BASE) OVERLAY
    {
        *(SysInitData)
        *(FlashInitData)
        *(FatInitData)
        
        *(SysInitBss)
        *(FlashInitBss)
        *(FatInitBss)
    }
    SYS_INIT_CODE_END (ImageLimit(SYS_INIT_CODE)) OVERLAY {}
    SYS_INIT_DATA_END (ImageLimit(SYS_INIT_DATA)) OVERLAY {}
    ScatterAssert(ImageLimit(SYS_INIT_CODE) < LOADER_CODE_BASE)
    ScatterAssert(ImageLimit(SYS_INIT_DATA) < LOADER_DATA_BASE) 
;
;==============================================================================
;
;   USB Section
;
;==============================================================================
;
    USB_CODE (ImageLimit(SYSAREA_OP_CODE)) OVERLAY
    {
        *(UsbCode)
    }
    USB_DATA (ImageLimit(SYSAREA_OP_DATA)) OVERLAY
    {
        *(UsbData)
        *(UsbBss)
    }
    USB_CODE_END (ImageLimit(USB_CODE)) OVERLAY {}
    USB_DATA_END (ImageLimit(USB_DATA)) OVERLAY {}
    ScatterAssert(ImageLimit(USB_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(USB_DATA) < (STACK_LIMIT - 0x0000))               ; < Flash copy buffer
;
;==============================================================================
;
;   Video Section
;
;==============================================================================
;
    #define VIDEOWIN_CODE_BASE  ((ImageLimit(FLASH_WRITE_CODE)>ImageLimit(FINDFILE_CODE))?ImageLimit(FLASH_WRITE_CODE):ImageLimit(FINDFILE_CODE))
    #define VIDEOWIN_DATA_BASE  ((ImageLimit(FLASH_WRITE_DATA)>ImageLimit(FINDFILE_DATA))?ImageLimit(FLASH_WRITE_DATA):ImageLimit(FINDFILE_DATA))

    VIDEOWIN_CODE (VIDEOWIN_CODE_BASE)      OVERLAY                     ;VideoWin Code
    {
        *(VideoWinCode)
    }
    VIDEOWIN_DATA (VIDEOWIN_DATA_BASE)      OVERLAY                     ;VideoWin Data
    {
        *(VideoWinData)
        *(VideoWinBss)
    }   
     
    VIDEO_CONTROL_CODE (ImageLimit(VIDEOWIN_CODE))   OVERLAY
    {
        *(VideoControlCode )
    }
    
    VIDEO_CONTROL_DATA (ImageLimit(VIDEOWIN_DATA))   OVERLAY
    {
        *(VideoControlData)
        *(VideoControlBss)
    }
    VIDEO_CONTROL_CODE_END (ImageLimit(VIDEO_CONTROL_CODE)) OVERLAY {}
    VIDEO_CONTROL_DATA_END (ImageLimit(VIDEO_CONTROL_DATA)) OVERLAY {}
    ScatterAssert(ImageLimit(VIDEO_CONTROL_DATA) < (STACK_LIMIT - 0x0000))               ; < Flash copy buffer
    
    MP2_DECODE_CODE (ImageLimit(VIDEO_CONTROL_CODE)) OVERLAY        ;Mp3 Decode Code
    {
        *(Mp2Code)
    }
    MP2_DECODE_DATA (ImageLimit(VIDEO_CONTROL_DATA)) OVERLAY        ;Mp3 Decode Data
    {
        *(Mp2Data)
        *(Mp2Bss)
    }
    AVI_DECODE_CODE (ImageLimit(MP2_DECODE_CODE)) OVERLAY        ;AVI Decode Code
    {
        *(AviDecCode)
        *(XvidDecCode)
    }
    AVI_DECODE_DATA (ImageLimit(MP2_DECODE_DATA)) OVERLAY        ;AVI Decode Data
    {
        *(AviDecData)
        *(XvidDecData)
        *(AviDecBss)
        *(XvidDecBss)
    }
    AVI_CODE_END (ImageLimit(AVI_DECODE_CODE)) OVERLAY {}
    AVI_DATA_END (ImageLimit(AVI_DECODE_DATA)) OVERLAY {}
    ScatterAssert(ImageLimit(AVI_DECODE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(AVI_DECODE_DATA) < (STACK_LIMIT))
;
;==============================================================================
;
;   Image Section
;
;==============================================================================
;
    #define PIC_CODE_BASE  ((ImageLimit(FLASH_WRITE_CODE)>ImageLimit(FINDFILE_CODE))?ImageLimit(FLASH_WRITE_CODE):ImageLimit(FINDFILE_CODE))
    #define PIC_DATA_BASE  ((ImageLimit(FLASH_WRITE_DATA)>ImageLimit(FINDFILE_DATA))?ImageLimit(FLASH_WRITE_DATA):ImageLimit(FINDFILE_DATA))
    PICWIN_CODE (PIC_CODE_BASE) OVERLAY                 ;FlashWrite Code
    {
        *(PicWinCode)
    }
    PICWIN_DATA (PIC_DATA_BASE) OVERLAY                 ;FlashWrite Data
    {
        *(PicWinData)
        *(PicWinBss)
    }
    IMAGE_CONTROL_CODE (ImageLimit(PICWIN_CODE)) OVERLAY                     
    {
        *(ImageContrlCode)
    }
    IMAGE_CONTROL_DATA (ImageLimit(PICWIN_DATA)) OVERLAY                     
    {
        *(ImageContrlData)
        *(ImageContrlBss)
    }
    JPG_DECODE_CODE (ImageLimit(IMAGE_CONTROL_CODE)) OVERLAY        ;jpg Decode Code
    {
        *(JpgDecCode)
    }
    JPG_DECODE_DATA (ImageLimit(IMAGE_CONTROL_DATA)) OVERLAY        ;jpg Decode Data
    {
        *(JpgDecData)
        *(JpgDecBss)
    }       
    BMP_DECODE_CODE (ImageLimit(IMAGE_CONTROL_CODE)) OVERLAY        ;bmp Decode Code
    {
        *(BmpDecCode)
        BMPDEC.o(+RO)
    }
    BMP_DECODE_DATA (ImageLimit(IMAGE_CONTROL_DATA)) OVERLAY        ;bmp Decode Data
    {
        *(BmpDecData)
        *(BmpDecBss)
        BMPDEC.o(+RW)
        BMPDEC.o(+ZI)
    }     
    #define IMAGE_CODE_END   ((ImageLimit(JPG_DECODE_CODE) > ImageLimit(BMP_DECODE_CODE)) ? ImageLimit(JPG_DECODE_CODE) : ImageLimit(BMP_DECODE_CODE))
    #define IMAGE_DATA_END   ((ImageLimit(JPG_DECODE_DATA) > ImageLimit(BMP_DECODE_DATA)) ? ImageLimit(JPG_DECODE_DATA) : ImageLimit(BMP_DECODE_DATA))
    PIC_CODE_END (IMAGE_CODE_END) OVERLAY {}
    PIC_DATA_END (IMAGE_DATA_END) OVERLAY {}
    ScatterAssert(IMAGE_CODE_END < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(IMAGE_DATA_END < (STACK_LIMIT))
;
;==============================================================================
;
;   UI Section
;
;   MainMenu¡¢MusicWin¡¢RadioWin¡¢RecordWin¡¢Text¡¢Browser¡¢SystemSet
;   and
;   Music¡¢Radio¡¢Record
; 
;
;==============================================================================
;
    ;#define UI_CODE_BASE  ((ImageLimit(SYSAREA_OP_CODE)>ImageLimit(FINDFILE_CODE))?ImageLimit(SYSAREA_OP_CODE):ImageLimit(FINDFILE_CODE))
    ;#define UI_DATA_BASE  ((ImageLimit(SYSAREA_OP_DATA)>ImageLimit(FINDFILE_DATA))?ImageLimit(SYSAREA_OP_DATA):ImageLimit(FINDFILE_DATA))
    #define UI_CODE_BASE  ((ImageLimit(ENCODE_CODE)>ImageLimit(FINDFILE_CODE))?ImageLimit(ENCODE_CODE):ImageLimit(FINDFILE_CODE))
    #define UI_DATA_BASE  ((ImageLimit(ENCODE_DATA)>ImageLimit(FINDFILE_DATA))?ImageLimit(ENCODE_DATA):ImageLimit(FINDFILE_DATA))
    
    ;--------------------------------------------------------------
    ;MainMenu, Overlay with Other UI Section
    MAINMENU_CODE (UI_CODE_BASE) OVERLAY                            ;MainMenu Main Code
    {
        *(MainMenuCode)
    }
    MAINMENU_DATA (UI_DATA_BASE) OVERLAY                            ;MainMenu Main Data
    {
        *(MainMenuData)
        *(MainMenuBss)
    }
    MAINMENU_INIT_CODE (ImageLimit(MAINMENU_CODE)) OVERLAY          ;MainMenu Init&DeInit Code, Overlay with MainMenu SVC Code
    {
        *(MainMenuInitCode)
        *(MainMenuDeInitCode)
    }
    MAINMENU_INIT_DATA (ImageLimit(MAINMENU_DATA)) OVERLAY          ;MainMenu Init&DeInit Data, Overlay with MainMenu SVC Data
    {
        *(MainMenuInitData)
        *(MainMenuDeInitData)
        *(MainMenuInitBss)
        *(MainMenuDeInitBss)
    }
    MAINMENU_SVC_CODE (ImageLimit(MAINMENU_CODE)) OVERLAY           ;MainMenu SVC Code, Overlay With MainMenu Init&DeInit Code
    {
        *(MainMenuServiceCode)
    }
    MAINMENU_SVC_DATA (ImageLimit(MAINMENU_DATA)) OVERLAY           ;MainMenu SVC Data, Overlay With MainMenu Init&DeInit Data
    {
        *(MainMenuServiceData)
        *(MainMenuServiceBss)
    }
    ;Compare Max UI Secton
    #define MAINMENU_CODE_END   ((ImageLimit(MAINMENU_INIT_CODE) > ImageLimit(MAINMENU_SVC_CODE)) ? ImageLimit(MAINMENU_INIT_CODE) : ImageLimit(MAINMENU_SVC_CODE))
    #define MAINMENU_DATA_END   ((ImageLimit(MAINMENU_INIT_DATA) > ImageLimit(MAINMENU_SVC_DATA)) ? ImageLimit(MAINMENU_INIT_DATA) : ImageLimit(MAINMENU_SVC_DATA))
    
    #define MAX_MAINMENU_CODE  ((UI_CODE_BASE > MAINMENU_CODE_END) ? UI_CODE_BASE : MAINMENU_CODE_END)
    #define MAX_MAINMENU_DATA  ((UI_DATA_BASE > MAINMENU_DATA_END) ? UI_DATA_BASE : MAINMENU_DATA_END)
  
    ;--------------------------------------------------------------
    ;MedialibWin   
    MEDIALIBWIN_CODE (UI_CODE_BASE) OVERLAY
    {
        *(MediaWinCode)
    }
    MEDIALIBWIN_DATA (UI_DATA_BASE) OVERLAY  
    {
        *(MediaWinData)
        *(MediaWinBss)
    }
    
    MEDIALIBWIN_INIT_CODE (ImageLimit(MEDIALIBWIN_CODE)) OVERLAY 
    {
        *(MediaWinInitCode)
        *(MediaWinDeInitCode)
    }
    MEDIALIBWIN_INIT_DATA (ImageLimit(MEDIALIBWIN_DATA)) OVERLAY 
    {
        *(MediaWinInitData)
        *(MediaWinInitBss)
        *(MediaWinDeInitData)
        *(MediaWinDeInitBss)
    }
    
    MEDIALIBWIN_SERVICE_CODE (ImageLimit(MEDIALIBWIN_CODE)) OVERLAY 
    {
        *(MediaWinServiceCode)
     
    } 
     MEDIALIBWIN_SERVICE_DATA (ImageLimit(MEDIALIBWIN_DATA)) OVERLAY 
    {
        *(MediaWinServiceData)
        *(MediaWinServiceBss)   
    }
    
    ;Compare Max UI Secton
    #define MEDIALIBWIN_CODE_END    ((ImageLimit(MEDIALIBWIN_INIT_CODE) > ImageLimit(MEDIALIBWIN_SERVICE_CODE)) ? ImageLimit(MEDIALIBWIN_INIT_CODE) : ImageLimit(MEDIALIBWIN_SERVICE_CODE))
    #define MEDIALIBWIN_DATA_END    ((ImageLimit(MEDIALIBWIN_INIT_DATA) > ImageLimit(MEDIALIBWIN_SERVICE_DATA)) ? ImageLimit(MEDIALIBWIN_INIT_DATA) : ImageLimit(MEDIALIBWIN_SERVICE_DATA))
    
    #define MAX_MEDIALIB_CODE       ((MAX_MAINMENU_CODE > MEDIALIBWIN_CODE_END) ? MAX_MAINMENU_CODE : MEDIALIBWIN_CODE_END)
    #define MAX_MEDIALIB_DATA       ((MAX_MAINMENU_DATA > MEDIALIBWIN_DATA_END) ? MAX_MAINMENU_DATA : MEDIALIBWIN_DATA_END)
    
    MEDIALIBWIN_CODE_ENDX (MEDIALIBWIN_CODE_END) OVERLAY {}
    MEDIALIBWIN_DATA_ENDX (MEDIALIBWIN_DATA_END) OVERLAY {}
   
    ;--------------------------------------------------------------
    ;MediabroWin
    MEDIABROWIN_CODE (UI_CODE_BASE) OVERLAY
    {
        *(MediaBroCode)
    }
    MEDIABROWIN_DATA (UI_DATA_BASE) OVERLAY
    {
        *(MediaBroData)
        *(MediaBroBss)
    }
    MEDIABROWIN_INIT_CODE (ImageLimit(MEDIABROWIN_CODE)) OVERLAY
    {
        *(MediaBroInitCode)
        *(MediaBroDeInitCode)
    }
    MEDIABROWIN_INIT_DATA (ImageLimit(MEDIABROWIN_DATA)) OVERLAY
    {
        *(MediaBroInitData)
        *(MediaBroInitBss)
        *(MediaBroDeInitData)
        *(MediaBroDeInitBss)
    }
    MEDIABROWIN_SERVICE_CODE (ImageLimit(MEDIABROWIN_CODE)) OVERLAY
    {
        *(MediaBroServiceCode)    
    }
    MEDIABROWIN_SERVICE_DATA (ImageLimit(MEDIABROWIN_DATA)) OVERLAY
    {
        *(MediaBroServiceData)
        *(MediaBroServiceBss)       
    }  
    MEDIABRO_SORTGET_CODE (ImageLimit(MEDIABROWIN_SERVICE_CODE)) OVERLAY
    {
        *(MediaBroSortGetCode)
    }   
    MEDIABRO_SORTGET_DATA (ImageLimit(MEDIABROWIN_SERVICE_DATA)) OVERLAY
    {
        *(MediaBroSortGetData)
        *(MediaBroSortGetBss)
    }   
    
    MEDIABROSUBWIN_CODE (ImageLimit(MEDIABROWIN_SERVICE_CODE)) OVERLAY
    {
        *(MediaBroSubCode)
    }   
    MEDIABROSUBWIN_DATA (ImageLimit(MEDIABROWIN_SERVICE_DATA)) OVERLAY
    {
        *(MediaBroSubData)
        *(MediaBroSubBss)
    }   
    MEDIAFAVOSUBWIN_CODE (ImageLimit(MEDIABROWIN_SERVICE_CODE)) OVERLAY
    {
        *(MediaFavoSubCode)
    }
    MEDIAFAVOSUBWIN_DATA (ImageLimit(MEDIABROWIN_SERVICE_DATA)) OVERLAY
    {
        *(MediaFavoSubData)
        *(MediaFavoSubBss)
    } 
    #define MAX_MEDIABROWIN_CODE_END    ((ImageLimit(MEDIABROSUBWIN_CODE) > ImageLimit(MEDIAFAVOSUBWIN_CODE)) ? ImageLimit(MEDIABROSUBWIN_CODE) : ImageLimit(MEDIAFAVOSUBWIN_CODE))
    #define MAX_MEDIABROWIN_DATA_END    ((ImageLimit(MEDIABROSUBWIN_DATA) > ImageLimit(MEDIAFAVOSUBWIN_DATA)) ? ImageLimit(MEDIABROSUBWIN_DATA) : ImageLimit(MEDIAFAVOSUBWIN_DATA))
    #define MAX_MEDIABROWIN_CODE        ((MAX_MEDIALIB_CODE > MAX_MEDIABROWIN_CODE_END) ? MAX_MEDIALIB_CODE : MAX_MEDIABROWIN_CODE_END)
    #define MAX_MEDIABROWIN_DATA        ((MAX_MEDIALIB_DATA > MAX_MEDIABROWIN_DATA_END) ? MAX_MEDIALIB_DATA : MAX_MEDIABROWIN_DATA_END)   
    MEDIABROWIN_CODE_END (MAX_MEDIABROWIN_CODE_END) OVERLAY {}
    MEDIABROWIN_DATA_END (MAX_MEDIABROWIN_DATA_END) OVERLAY {}
   
;--------------------------------------------------------------
;MusicWin
    MUSICWIN_CODE (UI_CODE_BASE) OVERLAY                            ;MusicWin Main Code
    {
        *(MusicCode)
    }
    MUSICWIN_DATA (UI_DATA_BASE) OVERLAY                            ;MusicWin Main Data
    {
        *(MusicData)
        *(MusicBss)
    }
    
    MUSICWIN_INIT_CODE (ImageLimit(MUSICWIN_CODE)) OVERLAY          ;MusicWin Init&DeInit Code, Overlay with MusicWin SVC Code
    {
        *(MusicInitCode)
        *(MusicDeInitCode)
    }
    MUSICWIN_INIT_DATA (ImageLimit(MUSICWIN_DATA)) OVERLAY          ;MusicWin Init&DeInit Data, Overlay with MusicWin SVC Data
    {
        *(MusicInitData)
        *(MusicDeInitData)
        
        *(MusicInitBss)
        *(MusicDeInitBss)
    }
    
    MUSICWIN_SVC_CODE (ImageLimit(MUSICWIN_CODE)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {
        *(MusicServiceCode)
    }
    
    MUSICWIN_SVC_DATA (ImageLimit(MUSICWIN_DATA)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {
        *(MusicServiceData)
        *(MusicServiceBss)
        *(MusicLrcInitData)
        *(MusicLrcPlayData)
        *(MusicLrcInitBss)
        *(MusicLrcPlayBss)
    }
    
    MUSICWIN_LRCCOMMON_CODE (ImageLimit(MUSICWIN_SVC_CODE)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {   
        *(MusicLrcCommonCode)
    }
    
    MUSICWIN_LRCCOMMON_DATA (ImageLimit(MUSICWIN_SVC_DATA)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {
        *(MusicLrcCommonData)
        *(MusicLrcCommonBss)
    }
    
     MUSICWIN_LRCINIT_CODE (ImageLimit(MUSICWIN_LRCCOMMON_CODE)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {       
        *(MusicLrcInitCode)       
    }
    
    MUSICWIN_LRCINIT_DATA (ImageLimit(MUSICWIN_LRCCOMMON_DATA)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {       
    }
    
    MUSICWIN_LRCPLAY_CODE (ImageLimit(MUSICWIN_LRCCOMMON_CODE)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {   
        *(MusicLrcCode)
    }
    
    MUSICWIN_LRCPLAY_DATA (ImageLimit(MUSICWIN_LRCCOMMON_DATA)) OVERLAY           ;MusicWin SVC Code, Overlay With MusicWin Init&DeInit Code
    {
        
    }
    ;Compare Max UI Secton
    #define MUSICWIN_CODE_END   ((ImageLimit(MUSICWIN_INIT_CODE) > ImageLimit(MUSICWIN_SVC_CODE)) ? ImageLimit(MUSICWIN_INIT_CODE) : ImageLimit(MUSICWIN_SVC_CODE))
    #define MUSICWIN_DATA_END   ((ImageLimit(MUSICWIN_INIT_DATA) > ImageLimit(MUSICWIN_SVC_DATA)) ? ImageLimit(MUSICWIN_INIT_DATA) : ImageLimit(MUSICWIN_SVC_DATA))
    
    #define MUSICWIN_LRC_CODE_END   ((ImageLimit(MUSICWIN_LRCINIT_CODE) > ImageLimit(MUSICWIN_LRCPLAY_CODE)) ? ImageLimit(MUSICWIN_LRCINIT_CODE) : ImageLimit(MUSICWIN_LRCPLAY_CODE))
    #define MUSICWIN_LRC_DATA_END   ((ImageLimit(MUSICWIN_LRCINIT_DATA) > ImageLimit(MUSICWIN_LRCPLAY_DATA)) ? ImageLimit(MUSICWIN_LRCINIT_DATA) : ImageLimit(MUSICWIN_LRCPLAY_DATA)) 
    
    #define MAX_MUSICWIN_CODE  ((MAX_MEDIABROWIN_CODE > MUSICWIN_LRC_CODE_END) ? MAX_MEDIABROWIN_CODE : MUSICWIN_LRC_CODE_END)
    #define MAX_MUSICWIN_DATA  ((MAX_MEDIABROWIN_DATA > MUSICWIN_LRC_DATA_END) ? MAX_MEDIABROWIN_DATA : MUSICWIN_LRC_DATA_END)

;--------------------------------------------------------------
;RadioWin
    RADIOWIN_CODE (UI_CODE_BASE) OVERLAY                            ;RadioWin Main Code
    {
        *(RadioWinCode)
    }
    RADIOWIN_DATA (UI_DATA_BASE) OVERLAY                            ;RadioWin Main Data
    {
        *(RadioWinData)
        *(RadioWinBss)
    }
    
    RADIOWIN_INIT_CODE (ImageLimit(RADIOWIN_CODE)) OVERLAY          ;RadioWin Init&DeInit Code, Overlay with RadioWin SVC Code
    {
        *(RadioWinInitCode)
        *(RadioWinDeInitCode)
    }
    RADIOWIN_INIT_DATA (ImageLimit(RADIOWIN_DATA)) OVERLAY          ;RadioWin Init&DeInit Data, Overlay with RadioWin SVC Data
    {
        *(RadioWinInitData)
        *(RadioWinDeInitData)
        *(RadioWinInitBss)
        *(RadioWinDeInitBss)
    }
    
    RADIOWIN_SVC_CODE (ImageLimit(RADIOWIN_CODE)) OVERLAY           ;RadioWin SVC Code, Overlay With RadioWin Init&DeInit Code
    {
        *(RadioWinServiceCode)
    }
    RADIOWIN_SVC_DATA (ImageLimit(RADIOWIN_DATA)) OVERLAY           ;RadioWin SVC Code, Overlay With RadioWin Init&DeInit Code
    {
        *(RadioWinServiceData)
        *(RadioWinServiceBss)
    }
    
    #define RADIOSUBWIN_CODE_BASE   ((ImageLimit(RADIOWIN_INIT_CODE) > ImageLimit(RADIOWIN_SVC_CODE)) ? ImageLimit(RADIOWIN_INIT_CODE) : ImageLimit(RADIOWIN_SVC_CODE))
    #define RADIOSUBWIN_DATA_BASE   ((ImageLimit(RADIOWIN_INIT_DATA) > ImageLimit(RADIOWIN_SVC_DATA)) ? ImageLimit(RADIOWIN_INIT_DATA) : ImageLimit(RADIOWIN_SVC_DATA))
    
    RADIOSUBWIN_CODE (RADIOSUBWIN_CODE_BASE) OVERLAY        ;RadioWin SubMenu Code
    {
        *(RadioSubWinCode)
    }
    RADIOSUBWIN_DATA (RADIOSUBWIN_DATA_BASE) OVERLAY        ;RadioWin SubMenu Data
    {
        *(RadioSubWinData)
        *(RadioSubWinBss)
    }  
    
    ;Compare Max UI Secton
    #define RADIOWIN_CODE_END   (ImageLimit(RADIOSUBWIN_CODE))
    #define RADIOWIN_DATA_END   (ImageLimit(RADIOSUBWIN_DATA))
    
    #define MAX_RADIOWIN_CODE  ((MAX_MUSICWIN_CODE > RADIOWIN_CODE_END) ? MAX_MUSICWIN_CODE : RADIOWIN_CODE_END)
    #define MAX_RADIOWIN_DATA  ((MAX_MUSICWIN_DATA > RADIOWIN_DATA_END) ? MAX_MUSICWIN_DATA : RADIOWIN_DATA_END)
        
;--------------------------------------------------------------
;RecordWin
    RECORDWIN_CODE (UI_CODE_BASE) OVERLAY                           ;RecordWin Main Code
    {
        *(RecordWinCode)
    }
    RECORDWIN_DATA (UI_DATA_BASE) OVERLAY                           ;RecordWin Main Data
    {
        *(RecordWinData)
        *(RecordWinBss)
    }
    
    RECORDWIN_INIT_CODE (ImageLimit(RECORDWIN_CODE)) OVERLAY        ;RecordWin Init&DeInit Code, Overlay with RecordWin SVC Code
    {
        *(RecordWinInitCode)
        *(RecordWinDeInitCode)
    }
    RECORDWIN_INIT_DATA (ImageLimit(RECORDWIN_DATA)) OVERLAY        ;RecordWin Init&DeInit Data, Overlay with RecordWin SVC Data
    {
        *(RecordWinInitData)
        *(RecordWinDeInitData)
        *(RecordWinInitBss)
        *(RecordWinDeInitBss)
    }
    
    RECORDWIN_SVC_CODE (ImageLimit(RECORDWIN_CODE)) OVERLAY         ;RecordWin SVC Code, Overlay With RecordWin Init&DeInit Code
    {
        *(RecordWinServiceCode)
    }
    
    RECORDWIN_SVC_DATA (ImageLimit(RECORDWIN_DATA)) OVERLAY         ;RecordWin SVC Code, Overlay With RecordWin Init&DeInit Code
    {
        *(RecordWinServiceData)
        *(RecordWinServiceBss)
    }
    
    ;Compare Max UI Secton
    #define RECORDWIN_CODE_END   ((ImageLimit(RECORDWIN_INIT_CODE) > ImageLimit(RECORDWIN_SVC_CODE)) ? ImageLimit(RECORDWIN_INIT_CODE) : ImageLimit(RECORDWIN_SVC_CODE))
    #define RECORDWIN_DATA_END   ((ImageLimit(RECORDWIN_INIT_DATA) > ImageLimit(RECORDWIN_SVC_DATA)) ? ImageLimit(RECORDWIN_INIT_DATA) : ImageLimit(RECORDWIN_SVC_DATA))
    
    #define MAX_RECORDWIN_CODE  ((MAX_RADIOWIN_CODE > RECORDWIN_CODE_END) ? MAX_RADIOWIN_CODE : RECORDWIN_CODE_END)
    #define MAX_RECORDWIN_DATA  ((MAX_RADIOWIN_DATA > RECORDWIN_DATA_END) ? MAX_RADIOWIN_DATA : RECORDWIN_DATA_END)

;--------------------------------------------------------------
;TextWin
    TEXTWIN_CODE (UI_CODE_BASE) OVERLAY                             ;TextWin Main Code
    {
        *(TextWinCode)
    }
    TEXTWIN_DATA (UI_DATA_BASE) OVERLAY                             ;TextWin Main Data
    {
        *(TextWinData)
        *(TextWinBss)
    }
    
    TEXTWIN_INIT_CODE (ImageLimit(TEXTWIN_CODE)) OVERLAY            ;TextWin Init&DeInit Code, Overlay with TextWin SVC Code
    {
        *(TextWinInitCode)
        *(TextWinDeInitCode)
    }
    TEXTWIN_INIT_DATA (ImageLimit(TEXTWIN_DATA)) OVERLAY            ;TextWin Init&DeInit Data, Overlay with TextWin SVC Data
    {
        *(TextWinInitData)
        *(TextWinDeInitData)
        *(TextWinInitBss)
        *(TextWinDeInitBss)
    }
    
    TEXTWIN_SVC_CODE (ImageLimit(TEXTWIN_CODE)) OVERLAY             ;TextWin SVC Code, Overlay With TextWin Init&DeInit Code
    {
        *(TextWinServiceCode)
    }
    TEXTWIN_SVC_DATA (ImageLimit(TEXTWIN_DATA)) OVERLAY             ;TextWin SVC Code, Overlay With TextWin Init&DeInit Code
    {
        *(TextWinServiceData)
        *(TextWinServiceBss)
    }
    
    ;BookMaskWin UI
    #define BOOKMASK_CODE_BASE   ((ImageLimit(TEXTWIN_INIT_CODE) > ImageLimit(TEXTWIN_SVC_CODE)) ? ImageLimit(TEXTWIN_INIT_CODE) : ImageLimit(TEXTWIN_SVC_CODE))
    #define BOOKMASK_DATA_BASE   ((ImageLimit(TEXTWIN_INIT_DATA) > ImageLimit(TEXTWIN_SVC_DATA)) ? ImageLimit(TEXTWIN_INIT_DATA) : ImageLimit(TEXTWIN_SVC_DATA))

    BOOKMASK_CODE (BOOKMASK_CODE_BASE) OVERLAY
    {
        *(BookMaskWinCode) 
    }
    BOOKMASK_DATA (BOOKMASK_DATA_BASE) OVERLAY
    {
        *(BookMaskWinData)
        *(BookMaskWinBss)
    }  
    
    ;Compare Max UI Secton
    #define TEXTWIN_CODE_END   (ImageLimit(BOOKMASK_CODE))
    #define TEXTWIN_DATA_END   (ImageLimit(BOOKMASK_DATA))
    
    ;#define MAX_TEXTWIN_CODE  ((MAX_RECORDWIN_CODE > TEXTWIN_CODE_END) ? MAX_RECORDWIN_CODE : TEXTWIN_CODE_END)
    ;#define MAX_TEXTWIN_DATA  ((MAX_RECORDWIN_DATA > TEXTWIN_DATA_END) ? MAX_RECORDWIN_DATA : TEXTWIN_DATA_END)
    #define MAX_TEXTWIN_CODE  ((MAX_RADIOWIN_CODE > TEXTWIN_CODE_END) ? MAX_RADIOWIN_CODE : TEXTWIN_CODE_END)
    #define MAX_TEXTWIN_DATA  ((MAX_RADIOWIN_DATA > TEXTWIN_DATA_END) ? MAX_RADIOWIN_DATA : TEXTWIN_DATA_END)

;--------------------------------------------------------------
;BrowserWin
    BROWSER_CODE (UI_CODE_BASE) OVERLAY                             ;BrowserWin Main Code
    {
        *(BroUICode)
        *(BroCoreCode)
    }
    BROWSER_DATA (UI_DATA_BASE) OVERLAY                             ;BrowserWin Main Data
    {
        *(BroUIData)
        *(BroCoreData)
        
        *(BroUIBss)
        *(BroCoreBss)
    }
    
    ;Compare Max UI Secton
    #define BROWSERWIN_CODE_END   (ImageLimit(BROWSER_CODE))
    #define BROWSERWIN_DATA_END   (ImageLimit(BROWSER_DATA))
    
    #define MAX_BROWSERWIN_CODE  ((MAX_TEXTWIN_CODE > BROWSERWIN_CODE_END) ? MAX_TEXTWIN_CODE : BROWSERWIN_CODE_END)
    #define MAX_BROWSERWIN_DATA  ((MAX_TEXTWIN_DATA > BROWSERWIN_DATA_END) ? MAX_TEXTWIN_DATA : BROWSERWIN_DATA_END)

;--------------------------------------------------------------
;SetMenuWin
    SETMENU_CODE (UI_CODE_BASE) OVERLAY                             ;SetMenuWin Main Code
    {
        *(SetMenuCode)
        *(SetCommonCode)
    }
    SETMENU_DATA (UI_DATA_BASE) OVERLAY                             ;SetMenuWin Main Data
    {
        *(SetMenuData)
        *(SetCommonData)
        
        *(SetMenuBss)
        *(SetCommonBss)
    }
    
    SETMENU_INIT_CODE (ImageLimit(SETMENU_CODE)) OVERLAY            ;SetMenuWin Init&DeInit Code, Overlay with SetMenuWin SVC Code
    {
        *(SetMenuInitCode)
        *(SetMenuDeInitCode)
    }
    SETMENU_INIT_DATA (ImageLimit(SETMENU_DATA)) OVERLAY            ;SetMenuWin Init&DeInit Data, Overlay with SetMenuWin SVC Data
    {
        *(SetMenuInitData)
        *(SetMenuDeInitData)
        *(SetMenuInitBss)
        *(SetMenuDeInitBss)
    }
    
    SETMENU_SVC_CODE (ImageLimit(SETMENU_CODE)) OVERLAY             ;SetMenuWin SVC Code, Overlay With SetMenuWin Init&DeInit Code
    {
        *(SetMenuServiceCode)
    }
    SETMENU_SVC_DATA (ImageLimit(SETMENU_DATA)) OVERLAY             ;SetMenuWin SVC Code, Overlay With SetMenuWin Init&DeInit Code
    {
        *(SetMenuServiceData)
        *(SetMenuServiceBss)
    }
    
    ;Compare Max UI Secton
    #define SETMENUWIN_CODE_END   ((ImageLimit(SETMENU_INIT_CODE) > ImageLimit(SETMENU_SVC_CODE)) ? ImageLimit(SETMENU_INIT_CODE) : ImageLimit(SETMENU_SVC_CODE))
    #define SETMENUWIN_DATA_END   ((ImageLimit(SETMENU_INIT_DATA) > ImageLimit(SETMENU_SVC_DATA)) ? ImageLimit(SETMENU_INIT_DATA) : ImageLimit(SETMENU_SVC_DATA))
    
    #define MAX_SETMENUWIN_CODE  ((MAX_BROWSERWIN_CODE > SETMENUWIN_CODE_END) ? MAX_BROWSERWIN_CODE : SETMENUWIN_CODE_END)
    #define MAX_SETMENUWIN_DATA  ((MAX_BROWSERWIN_DATA > SETMENUWIN_DATA_END) ? MAX_BROWSERWIN_DATA : SETMENUWIN_DATA_END)
 
   ;------------------------------------------------------------------------------------
    
    GAME_CODE (UI_CODE_BASE) OVERLAY            
    {
        *(GameWinCode)
    }
    
    GAME_DATA (UI_DATA_BASE) OVERLAY            
    {
        *(GameWinData)
        *(GameWinBss)
    }   
  
    #define GAME_CODE_END      (ImageLimit(GAME_CODE))
    #define GAME_DATA_END      (ImageLimit(GAME_DATA))
    #define MAX_GAME_CODE_END  ((GAME_CODE_END > MAX_SETMENUWIN_CODE) ? GAME_CODE_END : MAX_SETMENUWIN_CODE)
    #define MAX_GAME_DATA_END  ((GAME_DATA_END > MAX_SETMENUWIN_DATA) ? GAME_DATA_END : MAX_SETMENUWIN_DATA)
    
;------------------------------------------------------------------------------------
    CHARGE_WIN_CODE (UI_CODE_BASE) OVERLAY            
    {
        *(ChargeWinCode)
    }
    
    CHARGE_WIN_DATA (UI_DATA_BASE) OVERLAY            
    {
        *(ChargeWinData)
        *(ChargeWinBss)
    }   
  
    #define MAX_CHARGE_WIN_CODE_END  (ImageLimit(CHARGE_WIN_CODE))
    #define MAX_CHARGE_WIN_DATA_END  (ImageLimit(CHARGE_WIN_DATA))
    #define MAX_UI_CODE_END          ((MAX_CHARGE_WIN_CODE_END > MAX_GAME_CODE_END) ? MAX_CHARGE_WIN_CODE_END : MAX_GAME_CODE_END)
    #define MAX_UI_DATA_END          ((MAX_CHARGE_WIN_DATA_END > MAX_GAME_DATA_END) ? MAX_CHARGE_WIN_DATA_END : MAX_GAME_DATA_END)
;
;==============================================================================
;
;   Console Section
;   Music¡¢Radio¡¢Record controller
;   and
;   Music decode ¡¢Record decode
;   
;==============================================================================
;
    #define CONSOLE_CODE_BASE   MAX_UI_CODE_END
    #define CONSOLE_DATA_BASE   MAX_UI_DATA_END
;--------------------------------------------------------------
;Audio Control
    AUDIO_CONTROL_CODE (CONSOLE_CODE_BASE) OVERLAY             ;AudioControl Code
    {
        *(AudioCode)
    }
    AUDIO_CONTROL_DATA (CONSOLE_DATA_BASE) OVERLAY             ;AudioControl Data
    {
        *(AudioData)
        *(AudioBss)
    }
    #define AUDIO_CONTROL_CODE_END ImageLimit(AUDIO_CONTROL_CODE)
    #define AUDIO_CONTROL_DATA_END ImageLimit(AUDIO_CONTROL_DATA)
    
    AUDIO_CONTROL_INIT_CODE (AUDIO_CONTROL_CODE_END) OVERLAY             ;AudioControl Code
    {
        *(AudioInitCode)
    }
    AUDIO_CONTROL_INIT_DATA (AUDIO_CONTROL_DATA_END) OVERLAY             ;AudioControl Data
    {
    }
    
    ;EQ table, not use system space, and copy to temp buffer before use it
    AUDIO_EQ_CODE (ImageLimit(AUDIO_CONTROL_CODE)) OVERLAY              ;Eq Table Code
    {   
    }
    AUDIO_EQ_DATA (ImageLimit(AUDIO_CONTROL_DATA)) OVERLAY              ;Eq Table Data
    {
        *(RkEqData)
    }
    
    AUDIO_MSEQ_CODE  (ImageLimit(AUDIO_CONTROL_CODE)) OVERLAY           ;Mp3 Init Code
    {
        *(MsEqCode)
    }
    AUDIO_MSEQ_DATA  (ImageLimit(AUDIO_CONTROL_DATA)) OVERLAY           ;Mp3 Init Code
    {
        *(MsEqData)
        *(MsEqBss)
    }
    
    AUDIO_RKEQ_CODE  (ImageLimit(AUDIO_CONTROL_CODE)) OVERLAY           ;Mp3 Init Code
    {
        *(RkEqCode)
    }
    AUDIO_RKEQ_DATA  (ImageLimit(AUDIO_CONTROL_DATA)) OVERLAY           ;Mp3 Init Code
    {
        *(RkEqBss)
        rk_nano_eq.o(+RW)
        rk_nano_eq.o(+ZI)
    }
    #define AUDIO_DECODE_CODE_BASE1  ((ImageLimit(AUDIO_MSEQ_CODE) > ImageLimit(AUDIO_CONTROL_INIT_CODE)) ? ImageLimit(AUDIO_MSEQ_CODE) : ImageLimit(AUDIO_CONTROL_INIT_CODE))
    #define AUDIO_DECODE_DATA_BASE1  ((ImageLimit(AUDIO_MSEQ_DATA) > ImageLimit(AUDIO_CONTROL_INIT_DATA)) ? ImageLimit(AUDIO_MSEQ_DATA) : ImageLimit(AUDIO_CONTROL_INIT_DATA))
    #define AUDIO_DECODE_CODE_BASE  ((AUDIO_DECODE_CODE_BASE1 > ImageLimit(AUDIO_RKEQ_CODE)) ? AUDIO_DECODE_CODE_BASE1 : ImageLimit(AUDIO_RKEQ_CODE))
    #define AUDIO_DECODE_DATA_BASE  ((AUDIO_DECODE_DATA_BASE1 > ImageLimit(AUDIO_RKEQ_DATA)) ? AUDIO_DECODE_DATA_BASE1 : ImageLimit(AUDIO_RKEQ_DATA))
    ScatterAssert(AUDIO_DECODE_DATA_BASE < (STACK_LIMIT - 0x0000))
   
    AUDIO_ID3_CODE (AUDIO_DECODE_CODE_BASE) OVERLAY      
    {
        *(Id3Code)
        *(WmaId3Code)
    } 
    AUDIO_ID3_DATA (AUDIO_DECODE_DATA_BASE) OVERLAY      
    {
        *(Id3Data)
        *(WmaId3Data)
        *(Id3Bss)
        *(WmaId3Bss)
    } 
    ;--------------------------------------------------------------
    ;file information search and save
    FILE_INFO_SAVE_CODE (ImageLimit(AUDIO_ID3_CODE))   OVERLAY
    {
        *(FileInfoSaveCode)
    }
    FILE_INFO_SAVE_DATA (ImageLimit(AUDIO_ID3_DATA))   OVERLAY
    {
        *(FileInfoSaveData)
       *(FileInfoSaveBss)
    }
    FILE_INFO_SAVE_CODE_END (ImageLimit(FILE_INFO_SAVE_CODE))   OVERLAY {}
    FILE_INFO_SAVE_DATA_END (ImageLimit(FILE_INFO_SAVE_DATA))   OVERLAY {}
    ScatterAssert(ImageLimit(FILE_INFO_SAVE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(FILE_INFO_SAVE_DATA) < (STACK_LIMIT))
    
    ;
    ;--------------------------------------------------------------
    ;file information sort
    FILE_INFO_SORT_CODE (ImageLimit(AUDIO_ID3_CODE))   OVERLAY
    {
        *(FileInfoSortCode)
       
    }
    FILE_INFO_SORT_DATA (ImageLimit(AUDIO_ID3_DATA))   OVERLAY
    {
        *(FileInfoSortData)
       *(FileInfoSortBss)
    }  
    FILE_INFO_SORT_CODE_END (ImageLimit(FILE_INFO_SORT_CODE))   OVERLAY {}
    FILE_INFO_SORT_DATA_END (ImageLimit(FILE_INFO_SORT_DATA))   OVERLAY {}
    ScatterAssert(ImageLimit(FILE_INFO_SORT_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(FILE_INFO_SORT_DATA) < (STACK_LIMIT))
    
    ;--------------------------------------------------------------
    ;favorite
    FAVORESET_CODE (ImageLimit(AUDIO_ID3_CODE))   OVERLAY
    {
        *(FavoResetCode)
       
    }
    FAVORESET_DATA (ImageLimit(AUDIO_ID3_DATA))   OVERLAY
    {
        *(FavoResetData)
        *(FavoResetBss)
    }
    FAVORESET_CODE_END (ImageLimit(FAVORESET_CODE))   OVERLAY {}
    FAVORESET_DATA_END (ImageLimit(FAVORESET_DATA))   OVERLAY {}
    ScatterAssert(ImageLimit(FAVORESET_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(FAVORESET_DATA) < (STACK_LIMIT))
    
    ;--------------------------------------------------------------   
    AUDIO_ID3JPEG_CODE (ImageLimit(AUDIO_ID3_CODE)) OVERLAY                 
    {  
    	*(Id3JpgCode)
    	album_jpgdec_decompress.o(+RO)
    }
    AUDIO_ID3JPEG_DATA (ImageLimit(AUDIO_ID3_DATA)) OVERLAY                  
    {
        *(Id3JpgData)
        *(Id3JpgBss)
        album_jpgdec_decompress.o(+RW)
        album_jpgdec_decompress.o(+ZI)
    }  
    AUDIO_ID3JPEG_CODE_END (ImageLimit(AUDIO_ID3JPEG_CODE))   OVERLAY {}
    AUDIO_ID3JPEG_DATA_END (ImageLimit(AUDIO_ID3JPEG_DATA))   OVERLAY {}  
    ScatterAssert(ImageLimit(AUDIO_ID3JPEG_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(AUDIO_ID3JPEG_DATA) < (STACK_LIMIT))

    ;---------------------------------------------------------------
    ;Mp3 Decode 
    MP3_DECODE_CODE (ImageLimit(WIFI_AUDIO_CTRL_CODE)) OVERLAY                    ;Mp3 Decode Code AUDIO_DECODE_CODE_BASE
    {
        *(Mp3InitCode)
        *(Mp3Code)
        *(Mp3DecDataHL)
        mp3_rom_tbl.o
    }
    MP3_DECODE_DATA (ImageLimit(WIFI_AUDIO_CTRL_DATA)) OVERLAY                    ;Mp3 Decode Data AUDIO_DECODE_DATA_BASE
    {
        *(Mp3Data)
        *(Mp3Bss)
        *(Mp3InitData)
        *(Mp3InitBss)
    }
    MP3_DECODE_CODE_END (ImageLimit(MP3_DECODE_CODE)) OVERLAY {}
    MP3_DECODE_DATA_END (ImageLimit(MP3_DECODE_DATA)) OVERLAY {} 
    ScatterAssert(ImageLimit(MP3_DECODE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(MP3_DECODE_DATA) < (STACK_LIMIT))
    
    ;--------------------------------------------------------------
    ;Wma Decode
    WMA_COMMON_CODE(AUDIO_DECODE_CODE_BASE) OVERLAY                     ;Wma Comm Code
    {
        *(WmaCommonCode)
        pwma.o(+RO)
        wmaudio.o(+RO)
        drmpd.o(+RO)
    }
    WMA_COMMON_DATA (AUDIO_DECODE_DATA_BASE) OVERLAY                    ;Wma Comm Data
    {
        *(WmaDecoderData)
        *(WmaDecoderBss)
        
        pwma.o(+RW)
        pwma.o(+ZI)
        
        wmaudio.o(+RW)
        wmaudio.o(+ZI)
        
        drmpd.o(+RW)
        drmpd.o(+ZI)
    }    
    WMA_OPEN_CODEC_CODE (ImageLimit(WMA_COMMON_CODE)) OVERLAY       ;Wma OpenCodec Code, Overlay With Wma Decode Data
    {
        *(WmaOpenCodecCode)
        msaudiostdpro.o(+RO)
    }
    WMA_OPEN_CODEC_DATA (ImageLimit(WMA_COMMON_DATA)) OVERLAY       ;Wma OpenCodec Data, Overlay With Wma Decode Data
    {
        *(WmaOpenCodecData)
        *(WmaOpenCodecBss)
        msaudiostdpro.o(+RW)
        msaudiostdpro.o(+ZI)
    }    
    WMA_DATA_16Ob_CODE (ImageLimit(WMA_COMMON_CODE)) OVERLAY
    {   
    }
    WMA_DATA_16Ob_DATA (ImageLimit(WMA_COMMON_DATA)) OVERLAY
    {
    	*(wma_16Ob)
    }    
    WMA_DATA_44Qb_CODE (ImageLimit(WMA_COMMON_CODE)) OVERLAY
    {   
    }
    WMA_DATA_44Qb_DATA (ImageLimit(WMA_COMMON_DATA)) OVERLAY
    {
    	*(wma_44Qb)
    }    
    WMA_DATA_44Ob_CODE (ImageLimit(WMA_COMMON_CODE)) OVERLAY
    {   
    }
    WMA_DATA_44Ob_DATA (ImageLimit(WMA_COMMON_DATA)) OVERLAY
    {
    	*(wma_44Ob)
    }
    WMA_HIGH_LOW_COMMON_CODE (ImageLimit(WMA_COMMON_CODE)) OVERLAY      ;Wma Decode Comm Code
    {
        *(WmaHighLowCommonCode)
    }
    WMA_HIGH_LOW_COMMON_DATA (ImageLimit(WMA_DATA_44Qb_DATA)) OVERLAY      ;Wma Decode Comm Data
    {
    }
    WMA_HIGH_RATE_CODE (ImageLimit(WMA_HIGH_LOW_COMMON_CODE)) OVERLAY   ;Wma HighRate Code, Overlay With Wma LowRate Rate Code
    {
        *(WmaHighRateCode)
    }
    WMA_HIGH_RATE_DATA (ImageLimit(WMA_HIGH_LOW_COMMON_DATA)) OVERLAY   ;Wma HighRate Data, Overlay With Wma LowRate Rate Data
    {
    }
    WMA_HIGH_RATE_CODE_END (ImageLimit(WMA_HIGH_RATE_CODE)) OVERLAY {} 
    WMA_HIGH_RATE_DATA_END (ImageLimit(WMA_HIGH_RATE_DATA)) OVERLAY {} 
    ScatterAssert(ImageLimit(WMA_HIGH_RATE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(WMA_HIGH_RATE_DATA) < (STACK_LIMIT))
            
    WMA_LOW_RATE_CODE (ImageLimit(WMA_HIGH_LOW_COMMON_CODE)) OVERLAY    ;Wma LowRate Code, Overlay With Wma HighRate Rate Code
    {
        *(WmaLowRateCode)
    }
    WMA_LOW_RATE_DATA (ImageLimit(WMA_HIGH_LOW_COMMON_DATA)) OVERLAY    ;Wma LowRate Data, Overlay With Wma HighRate Rate Data
    {
    }
    WMA_LOW_RATE_CODE_END  (ImageLimit(WMA_LOW_RATE_CODE))  OVERLAY {} 
    WMA_LOW_RATE_DATA_END  (ImageLimit(WMA_LOW_RATE_DATA))  OVERLAY {} 
    ScatterAssert(ImageLimit(WMA_LOW_RATE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(WMA_LOW_RATE_DATA) < (STACK_LIMIT))

    ;---------------------------------------------------------------
    ;WavDecode
    WAV_DECODE_CODE (AUDIO_DECODE_CODE_BASE) OVERLAY             ;Wav Decode Code
    {
        *(WavDecInitCode)
        *(WavDecCode)
    }
    WAV_DECODE_DATA (AUDIO_DECODE_DATA_BASE) OVERLAY             ;Wav Decode Data
    {
        *(WavDecData)
        *(WavDecBss)
        *(WavDecInitData)
        *(WavDecInitBss)
    } 
    WAV_DECODE_CODE_END (ImageLimit(WAV_DECODE_CODE)) OVERLAY {} 
    WAV_DECODE_DATA_END (ImageLimit(WAV_DECODE_DATA)) OVERLAY {}   
    ScatterAssert(ImageLimit(WAV_DECODE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(WAV_DECODE_DATA) < (STACK_LIMIT))

    ;---------------------------------------------------------------
    ;FlacDecode
    FLAC_DECODE_CODE (AUDIO_DECODE_CODE_BASE) OVERLAY               ;Flac Decode Code
    {
        *(FlacDecCode)
        flac_stream_decoder.o(+RO)
    }
    FLAC_DECODE_DATA (AUDIO_DECODE_DATA_BASE) OVERLAY               ;Flac Decode Data
    {
        *(FlacDecData)
        *(FlacDecBss)
        flac_stream_decoder.o(+RW)
        flac_stream_decoder.o(+ZI)
    }
    FLAC_DECODE_CODE_END (ImageLimit(FLAC_DECODE_CODE)) OVERLAY {} 
    FLAC_DECODE_DATA_END (ImageLimit(FLAC_DECODE_DATA)) OVERLAY {}    
    ScatterAssert(ImageLimit(FLAC_DECODE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(FLAC_DECODE_DATA) < (STACK_LIMIT))
    
    ;---------------------------------------------------------------
    ;AacDecode
    AAC_DECODE_CODE (AUDIO_DECODE_CODE_BASE) OVERLAY                ;Aac Decode Code
    {
        *(AacDecCode)
    }
    AAC_DECODE_DATA (AUDIO_DECODE_DATA_BASE) OVERLAY                ;Aac Decode Data
    {
        *(AacDecData)
        *(AacDecBss)
        *(AacROData)
    } 
    AAC_DECODE_CODE_END (ImageLimit(AAC_DECODE_CODE)) OVERLAY {} 
    AAC_DECODE_DATA_END (ImageLimit(AAC_DECODE_DATA)) OVERLAY {} 
    ScatterAssert(ImageLimit(AAC_DECODE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(AAC_DECODE_DATA) < (STACK_LIMIT))
    
    ;---------------------------------------------------------------
    ;APEDecode       
    APE_DECODE_CODE (AUDIO_DECODE_CODE_BASE) OVERLAY                ;APE Decode Code
    {
        *(ApeDecCode)
    }
    APE_DECODE_DATA (AUDIO_DECODE_DATA_BASE) OVERLAY                ;APE Decode Data
    {
        *(ApeDecData)
        *(ApeDecBss)
    } 
    APE_DECODE_CODE_END (ImageLimit(APE_DECODE_CODE)) OVERLAY {} 
    APE_DECODE_DATA_END (ImageLimit(APE_DECODE_DATA)) OVERLAY {} 
    ScatterAssert(ImageLimit(APE_DECODE_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(APE_DECODE_DATA) < (STACK_LIMIT))
    
;---------------------------------------------------------------
;;Radio Control    
    FM_CONTROL_CODE (CONSOLE_CODE_BASE)   OVERLAY
    {
        *(FmControlCode )
    }    
    FM_CONTROL_DATA (CONSOLE_DATA_BASE)   OVERLAY
    {
        *(FmControlData)        
        *(FmControlBss)
    }  

 ;------------------------------------------------------------------   
    FM_DRIVER1_CODE (ImageLimit(FM_CONTROL_CODE))           OVERLAY
    {
        *(Qn8035DriverCode)
    }
    FM_DRIVER1_DATA (ImageLimit(FM_CONTROL_DATA))           OVERLAY
    {
        *(Qn8035DriverData)        
        *(Qn8035DriverBss)
    }    
    
    FM_DRIVER2_CODE (ImageLimit(FM_CONTROL_CODE))           OVERLAY
    {
        *(Fm5807DriverCode)
    }
    FM_DRIVER2_DATA (ImageLimit(FM_CONTROL_DATA))           OVERLAY
    {
        *(Fm5807DriverData)        
        *(Fm5807DriverBss)
    }  
       
    #define MAX_RADIO_DRIVE_CODE 		((ImageLimit(FM_DRIVER1_CODE) > ImageLimit(FM_DRIVER2_CODE)) ? ImageLimit(FM_DRIVER1_CODE) : ImageLimit(FM_DRIVER2_CODE))
    #define MAX_RADIO_DRIVE_DATA 		((ImageLimit(FM_DRIVER1_DATA) > ImageLimit(FM_DRIVER2_DATA)) ? ImageLimit(FM_DRIVER2_DATA) : ImageLimit(FM_DRIVER2_DATA))
	 	
	 	
    ScatterAssert(MAX_RADIO_DRIVE_CODE < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(MAX_RADIO_DRIVE_DATA < (STACK_LIMIT))


;--------------------------------------------------------------
;Record Control
    RECORD_CONTROL_CODE (RECORDWIN_CODE_END) OVERLAY
    {
        *(RecordControlCode)
        *(NSCode)
    }
    RECORD_CONTROL_DATA (RECORDWIN_DATA_END) OVERLAY
    {
        *(RecordControlData)
        *(RecordControlBss)
        
        *(NSData)
        *(NSBss)
    }
    
    ENCODE_MSADPCM_CODE(ImageLimit(RECORD_CONTROL_CODE)) OVERLAY
    {
        *(EncodeMsadpcmCode)
    }    
    ENCODE_MSADPCM_DATA(ImageLimit(RECORD_CONTROL_DATA)) OVERLAY
    {
        *(EncodeMsadpcmData)
        *(EncodeMsadpcmBss)
    }
    RECORD_CODE_END (ImageLimit(ENCODE_MSADPCM_CODE)) OVERLAY {} 
    RECORD_DATA_END (ImageLimit(ENCODE_MSADPCM_DATA)) OVERLAY {}   
    ScatterAssert(ImageLimit(ENCODE_MSADPCM_CODE) < (SYS_CODE_BASE + SYS_CODE_SIZE))
    ScatterAssert(ImageLimit(ENCODE_MSADPCM_DATA) < (STACK_LIMIT - 0x0000))               ; < Flash copy buffer
    
;
;==============================================================================
;
;   Heap&Stack Section
;   
;==============================================================================
;
    FTL_CACHE_BUF2 HEAP_BASE -(0x8080 + 0x3000) OVERLAY
    {
        *(ftlcache2)
    }
    FTL_CACHE_BUF HEAP_BASE -(0x8080)           OVERLAY
    {
        *(ftlcache)
    }
    ARM_LIB_HEAP    HEAP_BASE EMPTY (HEAP_LIMIT - HEAP_BASE)        ; Heap size == 0
    {
    }
    
    ARM_LIB_STACK   STACK_BASE EMPTY -(STACK_BASE - STACK_LIMIT)    ; Stack 0x20010000 -- 0x2000e000
    {
    }
}

;*******************************************************************************
